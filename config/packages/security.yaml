security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        # api_login is a route we will create below
        check_path: /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true
      jwt: ~

    main:
      lazy: true
      provider: app_user_provider

      logout:
        path: app_logout
        target: app_backoffice

      form_login:
        # "app_login" is the name of the route created previously
        login_path: app_login
        check_path: app_login
        default_target_path: app_backoffice
        always_use_default_target_path: true

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  access_control: #Du plus spécifique au moins spécifique
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/movies/\d+, roles: PUBLIC_ACCESS }
    - { path: ^/api/shows/\d+, roles: PUBLIC_ACCESS }
    - { path: ^/api/animes/\d+, roles: PUBLIC_ACCESS }
    - { path: ^/api/mangas/\d+, roles: PUBLIC_ACCESS }
    - { path: ^/api/videogames/\d+, roles: PUBLIC_ACCESS }
    - { path: ^/api/books/\d+, roles: PUBLIC_ACCESS }
    - { path: ^/api/movies, roles: PUBLIC_ACCESS }
    - { path: ^/api/shows, roles: PUBLIC_ACCESS }
    - { path: ^/api/animes, roles: PUBLIC_ACCESS }
    - { path: ^/api/mangas, roles: PUBLIC_ACCESS }
    - { path: ^/api/videogames, roles: PUBLIC_ACCESS }
    - { path: ^/api/books, roles: PUBLIC_ACCESS }
    - { path: ^/api/register, roles: PUBLIC_ACCESS }
    - { path: ^/api/users/update, roles: PUBLIC_ACCESS }
    - { path: ^/api/reviews/add, roles: PUBLIC_ACCESS }
    - { path: ^/api/reviews/update, roles: [ROLE_USER] }
    - { path: ^/api/reviews/delete, roles: [ROLE_USER] }
    - { path: ^/backoffice/users, roles: [ROLE_ADMIN] }
    - { path: ^/backoffice, roles: [ROLE_ADMIN, ROLE_CATALOG_MANAGER] }
    - { path: ^/backoffice, roles: IS_AUTHENTICATED_FULLY }

  role_hierarchy:
    ROLE_USER: PUBLIC_ACCESS
    ROLE_ADMIN: ROLE_CATALOG_MANAGER
    ROLE_CATALOG_MANAGER: ROLE_USER

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
